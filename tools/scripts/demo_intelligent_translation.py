#!/usr/bin/env python3
"""
Demo script for Intelligent Local Translation System
Showcases key features: context-aware translation, quality assessment, caching, and document translation
"""
import time
from pathlib import Path

from services.translation_service import (
    translation_service, 
    Language, 
    TranslationQuality, 
    TranslationContext
)
from utils.logger import get_logger

logger = get_logger("translation_demo")


def demo_context_aware_translation():
    """Demonstrate context-aware translation with terminology preservation"""
    print("\nüéØ Context-Aware Translation Demo")
    print("=" * 50)
    
    test_cases = [
        {
            "text": "„Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Éº„Éê„Éº„ÅÆË®≠ÂÆö„ÇíÂ§âÊõ¥„Åô„ÇãÂâç„Å´„ÄÅÂøÖ„Åö„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇAPI„Ç≠„Éº„ÅÆË®≠ÂÆö„ÅØÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ",
            "context": TranslationContext.TECHNICAL_MANUAL,
            "description": "Technical Manual"
        },
        {
            "text": "Á¨¨3ÂõõÂçäÊúü„ÅÆÂ£≤‰∏ä„ÅØÂâçÂπ¥ÂêåÊúüÊØî15%Â¢ó„ÅÆ5ÂÑÑÂÜÜ„Å®„Å™„Çä„Åæ„Åó„Åü„ÄÇÂñ∂Ê•≠Âà©Áõä„ÅØ8000‰∏áÂÜÜ„Åß„ÄÅÁõÆÊ®ô„Çí‰∏äÂõû„ÇãÁµêÊûú„Å®„Å™„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
            "context": TranslationContext.FINANCIAL_REPORT,
            "description": "Financial Report"
        },
        {
            "text": "Áî∞‰∏≠Êßò„ÄÅ„ÅÑ„Å§„ÇÇ„Åä‰∏ñË©±„Å´„Å™„Å£„Å¶„Åä„Çä„Åæ„Åô„ÄÇÊù•ÈÄ±„ÅÆ‰ºöË≠∞„ÅÆ‰ª∂„Åß„ÅîÈÄ£Áµ°„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇË≥áÊñô„ÅÆÊ∫ñÂÇô„Åå„Åß„Åç„Åæ„Åó„Åü„ÅÆ„Åß„ÄÅ‰∫ãÂâç„Å´„ÅîÁ¢∫Ë™ç„ÅÑ„Åü„Å†„Åë„Åæ„Åô„Åß„Åó„Çá„ÅÜ„Åã„ÄÇ",
            "context": TranslationContext.EMAIL_COMMUNICATION,
            "description": "Business Email"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. {case['description']}:")
        print(f"Original (Japanese): {case['text']}")
        
        result = translation_service.translate(
            case['text'],
            target_language=Language.ENGLISH,
            quality=TranslationQuality.BUSINESS,
            context_type=case['context'],
            preserve_terminology=True
        )
        
        print(f"Translation: {result['translated_text']}")
        print(f"Confidence: {result['confidence']:.3f}")
        print(f"Quality: {result['quality_assessment']}")
        print(f"Preserved Terms: {result.get('preserved_terms', 0)}")
        print(f"Method: {result.get('method', 'unknown')}")


def demo_translation_caching():
    """Demonstrate translation caching for performance"""
    print("\n‚ö° Translation Caching Demo")
    print("=" * 50)
    
    test_text = "„Åì„Çå„ÅØ„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„Åß„Åô„ÄÇÂêå„Åò„ÉÜ„Ç≠„Çπ„Éà„ÇíË§áÊï∞ÂõûÁøªË®≥„Åó„Å¶„ÄÅ„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆÂäπÊûú„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô„ÄÇ"
    
    print(f"Test Text: {test_text}")
    
    # First translation (not cached)
    print("\n1. First translation (not cached):")
    start_time = time.time()
    result1 = translation_service.translate(
        test_text,
        target_language=Language.ENGLISH,
        quality=TranslationQuality.BUSINESS
    )
    first_duration = time.time() - start_time
    
    print(f"Translation: {result1['translated_text']}")
    print(f"Time: {first_duration:.3f} seconds")
    print(f"Cached: {result1.get('cached', False)}")
    
    # Second translation (should be cached)
    print("\n2. Second translation (should be cached):")
    start_time = time.time()
    result2 = translation_service.translate(
        test_text,
        target_language=Language.ENGLISH,
        quality=TranslationQuality.BUSINESS
    )
    second_duration = time.time() - start_time
    
    print(f"Translation: {result2['translated_text']}")
    print(f"Time: {second_duration:.3f} seconds")
    print(f"Cached: {result2.get('cached', False)}")
    
    if second_duration > 0:
        speed_improvement = first_duration / second_duration
        print(f"Speed Improvement: {speed_improvement:.1f}x faster")


def demo_quality_assessment():
    """Demonstrate translation quality assessment"""
    print("\nüìä Quality Assessment Demo")
    print("=" * 50)
    
    test_cases = [
        {
            "text": "„Åì„Çì„Å´„Å°„ÅØ„ÄÅÂÖÉÊ∞ó„Åß„Åô„ÅãÔºü",
            "description": "Simple greeting"
        },
        {
            "text": "ÂºäÁ§æ„ÅÆÊñ∞„Åó„ÅÑ„ÇØ„É©„Ç¶„Éâ„Éô„Éº„Çπ„ÅÆ„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„ÅØ„ÄÅ‰ºÅÊ•≠„ÅÆ„Éá„Ç∏„Çø„É´Â§âÈù©„ÇíÊîØÊè¥„Åó„ÄÅÊ•≠ÂãôÂäπÁéá„Çí30%Âêë‰∏ä„Åï„Åõ„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ",
            "description": "Business proposal"
        },
        {
            "text": "„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÇíÊúÄÈÅ©Âåñ„Åô„Çã„Åü„ÇÅ„Å´„ÄÅ„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÂÜçÊßãÁØâ„Åó„ÄÅ„ÇØ„Ç®„É™„ÅÆÂÆüË°åÊôÇÈñì„ÇíÁü≠Á∏Æ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ",
            "description": "Technical content"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. {case['description']}:")
        print(f"Original: {case['text']}")
        
        result = translation_service.translate(
            case['text'],
            target_language=Language.ENGLISH,
            quality=TranslationQuality.BUSINESS
        )
        
        validation = translation_service.validate_translation_quality(
            case['text'],
            result['translated_text'],
            Language.ENGLISH
        )
        
        print(f"Translation: {result['translated_text']}")
        print(f"Confidence: {result['confidence']:.3f}")
        print(f"Quality Assessment: {result['quality_assessment']}")
        print(f"Validation Score: {validation['overall_score']:.3f}")
        print(f"Issues: {len(validation['issues'])}")


def demo_document_translation():
    """Demonstrate document-to-document translation"""
    print("\nüìÑ Document Translation Demo")
    print("=" * 50)
    
    # Create a sample Japanese document
    sample_doc_path = Path("sample_business_doc_ja.txt")
    sample_content = """
‰ºöÁ§æÊ¶ÇË¶Å

Ê†™Âºè‰ºöÁ§æ„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„Ç∫„ÅØ„ÄÅ2020Âπ¥„Å´Ë®≠Á´ã„Åï„Çå„ÅüÈù©Êñ∞ÁöÑ„Å™IT‰ºÅÊ•≠„Åß„Åô„ÄÇ

‰∫ãÊ•≠ÂÜÖÂÆπÔºö
‚Ä¢ „ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢ÈñãÁô∫
‚Ä¢ „ÇØ„É©„Ç¶„Éâ„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥
‚Ä¢ „Éá„Éº„ÇøÂàÜÊûê„Çµ„Éº„Éì„Çπ
‚Ä¢ AI„ÉªÊ©üÊ¢∞Â≠¶Áøí„Ç≥„É≥„Çµ„É´„ÉÜ„Ç£„É≥„Ç∞

Ë≤°ÂãôÊÉÖÂ†±Ôºà2023Âπ¥Â∫¶ÔºâÔºö
‚Ä¢ Â£≤‰∏äÈ´ò: 12ÂÑÑÂÜÜ
‚Ä¢ Âñ∂Ê•≠Âà©Áõä: 2ÂÑÑ4000‰∏áÂÜÜ
‚Ä¢ ÂæìÊ•≠Âì°Êï∞: 85Âêç
‚Ä¢ Êú¨Á§æÊâÄÂú®Âú∞: Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫

ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØÔºö
‚Ä¢ „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û: Python, JavaScript, Go
‚Ä¢ „Éá„Éº„Çø„Éô„Éº„Çπ: PostgreSQL, MongoDB, Redis
‚Ä¢ „ÇØ„É©„Ç¶„Éâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†: AWS, Azure
‚Ä¢ ÈñãÁô∫„ÉÑ„Éº„É´: Docker, Kubernetes, Git

„ÅäÂïè„ÅÑÂêà„Çè„ÅõÔºö
Email: info@techsolutions.co.jp
ÈõªË©±: 03-1234-5678
"""
    
    try:
        # Create sample document
        with open(sample_doc_path, 'w', encoding='utf-8') as f:
            f.write(sample_content)
        
        print(f"Created sample document: {sample_doc_path}")
        print(f"Document size: {len(sample_content)} characters")
        
        # Translate document
        print("\nTranslating document...")
        result = translation_service.translate_document_to_document(
            str(sample_doc_path),
            Language.ENGLISH
        )
        
        if result.get("success", False):
            print(f"‚úÖ Translation successful!")
            print(f"Output file: {result['output_document']}")
            print(f"Source language: {result['source_language']}")
            print(f"Target language: {result['target_language']}")
            print(f"Translation confidence: {result['translation_confidence']:.3f}")
            print(f"Context type: {result['context_type']}")
            print(f"Preserved terms: {result['preserved_terms']}")
            
            # Show a preview of the translated content
            output_path = Path(result['output_document'])
            if output_path.exists():
                with open(output_path, 'r', encoding='utf-8') as f:
                    translated_content = f.read()
                
                print(f"\nTranslated content preview (first 300 characters):")
                print("-" * 50)
                print(translated_content[:300] + "..." if len(translated_content) > 300 else translated_content)
                
                # Clean up
                output_path.unlink()
        else:
            print(f"‚ùå Translation failed: {result.get('error', 'Unknown error')}")
        
        # Clean up sample document
        sample_doc_path.unlink()
        
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        if sample_doc_path.exists():
            sample_doc_path.unlink()


def demo_system_statistics():
    """Show system statistics and capabilities"""
    print("\nüìà System Statistics")
    print("=" * 50)
    
    stats = translation_service.get_translation_statistics()
    
    print("Cache Statistics:")
    cache_stats = stats.get("cache_statistics", {})
    print(f"  ‚Ä¢ Total cached translations: {cache_stats.get('total_cached_translations', 0)}")
    print(f"  ‚Ä¢ Average confidence: {cache_stats.get('average_confidence', 0):.3f}")
    print(f"  ‚Ä¢ Total cache uses: {cache_stats.get('total_cache_uses', 0)}")
    print(f"  ‚Ä¢ Language pairs supported: {cache_stats.get('supported_language_pairs', 0)}")
    
    print(f"\nSystem Capabilities:")
    print(f"  ‚Ä¢ Technical terms loaded: {stats.get('technical_terms_loaded', 0)}")
    print(f"  ‚Ä¢ Fallback translation available: {'Yes' if stats.get('fallback_available', False) else 'No'}")
    
    print(f"\nQuality Distribution:")
    quality_dist = stats.get("quality_distribution", {})
    for quality, count in quality_dist.items():
        print(f"  ‚Ä¢ {quality.title()}: {count}")
    
    print(f"\nTranslation Methods:")
    method_dist = stats.get("method_distribution", {})
    for method, count in method_dist.items():
        print(f"  ‚Ä¢ {method}: {count}")
    
    print(f"\nSupported Languages:")
    languages = translation_service.get_supported_languages()
    for lang in languages:
        print(f"  ‚Ä¢ {lang['name']} ({lang['native_name']}) - {lang['code']}")
    
    print(f"\nSupported Contexts:")
    contexts = translation_service.get_supported_contexts()
    for context in contexts[:5]:  # Show first 5
        print(f"  ‚Ä¢ {context['name']}")
    print(f"  ... and {len(contexts) - 5} more")


def main():
    """Run the intelligent translation system demo"""
    print("üöÄ Intelligent Local Translation System Demo")
    print("=" * 60)
    print("Showcasing advanced features:")
    print("‚Ä¢ Context-aware translation with terminology preservation")
    print("‚Ä¢ Translation quality assessment and validation")
    print("‚Ä¢ Performance caching for consistency")
    print("‚Ä¢ Document-to-document translation")
    print("‚Ä¢ System statistics and monitoring")
    
    try:
        # Run demos
        demo_context_aware_translation()
        demo_translation_caching()
        demo_quality_assessment()
        demo_document_translation()
        demo_system_statistics()
        
        print("\n" + "=" * 60)
        print("‚úÖ Demo completed successfully!")
        print("üéØ Key features demonstrated:")
        print("   ‚Ä¢ Context-aware translation preserves technical terminology")
        print("   ‚Ä¢ Caching provides significant performance improvements")
        print("   ‚Ä¢ Quality assessment ensures translation reliability")
        print("   ‚Ä¢ Document translation supports business workflows")
        print("   ‚Ä¢ System monitoring provides operational insights")
        
    except Exception as e:
        logger.error(f"Demo failed: {e}")
        print(f"‚ùå Demo failed: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())